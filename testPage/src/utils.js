export const ANAGRAM_EXCLUSIONS = {
  'dog': 'odg', // –≤–º–µ—Å—Ç–æ God
  'top': 'otp',  // –≤–º–µ—Å—Ç–æ Pot
  '–ª–∞–∫': '–ª–∫–∞',
  
  // –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –º–∞—Ç–µ—Ä–Ω—ã–µ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ
  'god': 'ogd',
  'ass': 'sas',
  'sex': 'sxe',
  'xxx': 'xxz',
  'fag': 'fga',
  'fuk': 'fku',
  'fuc': 'fcu',
  'fck': 'fkc',
  'cum': 'cmu',
  'dic': 'dci',
  'dck': 'dkc',
  'tit': 'tti',
  'pus': 'psu',
  'cok': 'cko',
  'coc': 'cco',
  'nig': 'ngi',
  'slut': 'sult',
  'whore': 'wohre',
  'rape': 'reap',
  'blet': 'telb',
  
  // —Ä—É—Å—Å–∫–∏–µ –º–∞—Ç–µ—Ä–Ω—ã–µ –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ
  '—Ö—É–π': '–π—É—Ö',
  '–ø–∏–∑': '–∑–ø–∏',
  '–ø–∏–¥': '–¥–ø–∏',
  '–µ–±–∞': '–±–µ—è',
  '—ë–±–∞': '–±—ë–∞',
  '–≥–∞–Ω–¥': '–Ω–≥–∞–¥',
  '—Å—É–∫–∞': '—Å–∫–∞—É',
  '—à–ª—é—Ö': '–ª—é—à—Ö',
  '–¥—Ä–æ—á': '—Ä–æ—á–¥',
  '–±–ª—è–¥': '–ª—è–¥–±',
  '–∑–∞–ª—É–ø': '–ª—É–∑–∞–ø',
  '–º—Ä–∞–∑': '–∑—Ä–∞–º',
  '—á–º–æ': '–º–æ—á',
  '–∂–æ–ø': '–ø–æ–∂',
  '–≥–æ–≤–Ω': '–≤–æ–Ω–≥',
  '—Ö—É–µ—Å': '–µ—Ö—É—Å',
  '–ø–∏–¥—Ä': '–∏—Ä–ø–¥',
  '—Å–µ—Ä—å–≥–∏': '—Å–µ–≥–∏—Ä—å',
  '–¥—É—Ö–∏': '—É—Ö–∏–¥',
  '–ø–∞–∑–ª': '–∞–∑–ø–ª',
  '–≥–∞–Ω—Ç–µ–ª—å': '—Ç–µ–ª—å–≥–∞–Ω',
  '—á–µ–º–æ–¥–∞–Ω': '–¥–∞—á–µ–º–Ω–æ',
  '–µ–±': '–±–µ',
  '—ë–±': '–±—ë',
}

const shuffleArray = (arr) => {
  for (let i = arr.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1))
    ;[arr[i], arr[j]] = [arr[j], arr[i]]
  }
  return arr
}

const shuffleSingleWord = (w) => {
  if (w.length <= 2) return w
  
  // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  const lower = w.toLowerCase()
  // üõ°Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (ANAGRAM_EXCLUSIONS[lower]) {
    return ANAGRAM_EXCLUSIONS[lower]
  }
  
  // üõ°Ô∏è –ó–∞—Ç–µ–º –ø–æ–∏—Å–∫ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  for (const [bad, safe] of Object.entries(ANAGRAM_EXCLUSIONS)) {
    if (lower.includes(bad)) {
      return lower.replace(bad, safe)
    }
  }
  
  let result
  if (w.length === 3) {
    result = shuffleArray([...w]).join('')
  } else {
    const chars = w.split('')
    const middle = chars.slice(1, -1)
    const shuffled = shuffleArray([...middle]).join('')
    result = chars[0] + shuffled + chars[chars.length - 1]
  }
  
  // –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º ‚Üí —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ–ø–æ–ª–∞–º –∏ –º–µ–Ω—è–µ–º —á–∞—Å—Ç–∏
  if (result === w) {
    const mid = Math.floor(w.length / 2)
    result = w.slice(mid) + w.slice(0, mid)
  }
  
  return result
}

const capitalizeFirstLetter = (original, shuffled) => {
  const first = [...original].find(ch => /[A-Za-z–ê-–Ø–∞-—è–Å—ë]/.test(ch))
  if (!first) return shuffled
  
  const target = first.toLocaleLowerCase()
  const chars = [...shuffled]
  const idx = chars.findIndex(ch => ch.toLocaleLowerCase() === target)
  if (idx === -1) return shuffled
  
  chars[idx] = chars[idx].toLocaleUpperCase()
  return chars.join('')
}


// Fisher‚ÄìYates –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã
export const fisherYatesShuffleWord = word => {
  if (!word || word.length <= 2) return word
  
  let firstWordDone = false
  
  return word
    .split(/([ -])/g) // —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –¥–µ—Ñ–∏—Å–∞–º (—Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö)
    .map(chunk => {
      if (!/[A-Za-z–ê-–Ø–∞-—è–Å—ë]/.test(chunk)) return chunk
      
      const shuffled = shuffleSingleWord(chunk)
      
      if (!firstWordDone) {
        firstWordDone = true
        return capitalizeFirstLetter(chunk, shuffled)
      }
      
      return shuffled
    })
    .join('')
}
