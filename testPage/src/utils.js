export const ANAGRAM_EXCLUSIONS = {
  'dog': 'odg', // –≤–º–µ—Å—Ç–æ God
  'top': 'otp',  // –≤–º–µ—Å—Ç–æ Pot
  '–ª–∞–∫': '–ª–∫–∞'
}

// Fisher‚ÄìYates –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã
export const fisherYatesShuffleWord = word => {
  if (!word || word.length <= 2) return word
  
  const shuffleArray = arr => {
    for (let i = arr.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[arr[i], arr[j]] = [arr[j], arr[i]]
    }
    return arr
  }
  
  const shuffleSingleWord = w => {
    if (w.length <= 2) return w
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    const lower = w.toLowerCase()
    if (ANAGRAM_EXCLUSIONS[lower]) {
      return ANAGRAM_EXCLUSIONS[lower]
    }
    
    let result
    if (w.length === 3) {
      result = shuffleArray([...w]).join('')
    } else {
      const chars = w.split('')
      const middle = chars.slice(1, -1)
      const shuffled = shuffleArray([...middle]).join('')
      result = chars[0] + shuffled + chars[chars.length - 1]
    }
    
    // –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–≤–ø–∞–ª —Å –∏—Å—Ö–æ–¥–Ω—ã–º ‚Üí —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ–ø–æ–ª–∞–º –∏ –º–µ–Ω—è–µ–º —á–∞—Å—Ç–∏
    if (result === w) {
      const mid = Math.floor(w.length / 2)
      result = w.slice(mid) + w.slice(0, mid)
    }
    
    return result
  }
  
  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–µ–ª–∞–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–æ–π –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ —Å—Ç—Ä–æ–∫–µ
  const capitalizeFirstAlpha = s => {
    const i = s.search(/[A-Za-z–ê-–Ø–∞-—è–Å—ë]/)
    return i === -1 ? s : s.slice(0, i) + s[i].toUpperCase() + s.slice(i + 1)
  }
  
  let firstWordDone = false
  
  return word
    .split(/([ -])/g) // —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –¥–µ—Ñ–∏—Å–∞–º (—Å–æ—Ö—Ä–∞–Ω—è—è –∏—Ö)
    .map(chunk => {
      if (!/[A-Za-z–ê-–Ø–∞-—è–Å—ë]/.test(chunk)) return chunk
      
      const shuffled = shuffleSingleWord(chunk)
      
      // üëâ –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Ç–æ–ª—å–∫–æ —É –ø–µ—Ä–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–≥–ª–∞–≤–Ω–æ–π
      if (!firstWordDone) {
        firstWordDone = true
        return capitalizeFirstAlpha(shuffled)
      }
      
      // üëâ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –±–µ–∑ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
      return shuffled
    })
    .join('')
}
